
/*
MIT License

Copyright (c) 2018 Chris Rabe

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
// Prolog Grammar
// ================================================
// Based off prolog.grammar.txt inside the reference folder
//
// original source is https://www.npmjs.com/package/pegjs-prolog-parser

start = prolog

// ---- Prolog Grammar -----

prolog 
  = clause:(clause) clauses: (ws clause)* {
    return clauses.concat([clause]);
  }

// ---- Skipped ----

SourceCharacter 
  = .

WhiteSpace "whitespace"
  = "\t"
  / "\v"
  / "\f"
  / " "
  / "\u00A0"
  / "\uFEFF"
  / Zs
  / LineTerminatorSequence

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028"
  / "\u2029"

Zs = [\u0020\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]

Comment "comment"
  = SingleLineComment

SingleLineComment
  = "%" (!LineTerminator SourceCharacter)*

ws 
  = (WhiteSpace / Comment)*

// ---- Keywords ----

assign = ws "is" ws
arg_start = ws "(" ws
arg_end = ws ")" ws
list_start = ws "[" ws
list_end = ws "]" ws
list_join = ws "|" ws
atom_quotation = ws "'" ws
comma_separator = ws "," ws
colon_separator = ws ":" ws
clause_implication = ws ":-" ws
clause_end = ws "." ws

// ---- Operators ---- 

op_add = ws "+" ws
op_sub = ws "-" ws
op_div = ws "/" ws
op_mul = ws "*" ws
op_eq = ws "=" ws
op_gt = ws ">" ws
op_lt = ws "<" ws
op_nt_eq = ws "\\=" ws
op_gt_eq = ws ">=" ws
op_lt_eq = ws "=<" ws
op_cut = ws symbol:[!] ws {
  return [symbol];
}

// ---- Facts, Rules, and Clauses
clause 
  = sentence:(rule / fact) clause_end { return sentence }

rule 
  = head:compound_term clause_implication body: premises {
    return {
      head: head,
      body: body
    }
  } 

fact = var_assign / compound_term

// ---- Premises ----

premises 
  = prem: premise prems: (prem_separator premise)* {
    return [prem].concat(prems.map(function(p) {
      return p[1];
    }));
  }

prem_separator = comma_separator / colon_separator

premise
  = premise: (op_cut/ fact / comparison) {
    return premise
}

// ---- Arguments ----
arguments 
  = arg:argument args:(comma_separator argument)* {
    return [arg].concat(args.map(function(a) {
      return a[1];
    }));
  }

argument 
  = ws argument: (compound_term / join / list / term ) ws{
    return argument
  }

// ---- Lists ----
list
  = list_start args:arguments* list_end {
    return {
      type: 'list',
      args: args[0]
    }
  }

join
  = list_start left:arguments list_join right:arguments list_end {
    // Rename node type
    var l_node = left
    var r_node = right
    l_node.type("Left")
    r_node.type("Right")
    // Push as left and right children 
    return {
      type: 'join',
      l: l_node,
      r: r_node
    }
  }

// ---- Terms ----

term = primitive / variable

// ---- Compound Terms ----

compound_term
  = functor:functor arg_start args:arguments arg_end {
    return {
      functor: functor,
      args: args
    };
  }

// --- Primitive Terms ----

primitive 
  = ws primitive:(atom / number) ws {
    return primitive
  }

// ---- Numbers ----
number "number"
  = minus? int frac? exp? { 
        return {"type":"number", "value": text()};
    }

decimal_point
  = "."

digit1_9
  = [1-9]

e
  = [eE]

exp
  = e (minus / plus)? DIGIT+

frac
  = decimal_point DIGIT+

int
  = zero / (digit1_9 DIGIT*)

minus
  = "-"

plus
  = "+"

zero
  = "0"

// ---- Strings ----
string "string"
  = quotation_mark chars:char* quotation_mark { return chars.join(""); }

char
  = unescaped
  / escape
    sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$(HEXDIG HEXDIG HEXDIG HEXDIG) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence; }

escape
  = "\\"

quotation_mark
  = ws '"' ws

unescaped
  = [^\0-\x1F\x22\x5C]

// ---- Atoms ----
atom 
  = atom: 
        (lowercase_word 
        / quoted_atom
        / string) {return {"type": "atom", value: atom}}

quoted_atom = atom_quotation words:lowercase_word+ atom_quotation { return words.join(' ') }

lowercase_word 
  = ws head:[a-z] tail:[a-zA-Z0-9_]* ws { return text().trim() }

// ---- Variables ----
variable 
  = ws head: [A-Z_] tail: [a-zA-Z0-9_]* ws { return { value: text().trim()} }

// ---- Expressions ----
expression = multiplication / addition / subtraction / division / term

addition 
  = left:term op_add right:term { 
      return [left, right];
    }

subtraction
  = left:term op_sub right:term {
      return [left, right];
    }

multiplication
  = left:term op_mul right:term {
      return [left, right];
    }

division 
  = left:term op_div right:term {
      return [left, right];
    }

// ---- Comparisons ----
comparison = eq / gt / lt / nt_eq / gt_eq / lt_eq

eq 
  = left:term op_eq right:term {
      return ["eq", left, right];
  }

gt
  = left:term op_gt right:term {
      return ["gt", left, right];
  }

lt 
  = left:term op_lt right:term {
      return ["lt", left, right];
  }

nt_eq
  = left:term op_nt_eq right:term {
      return ["nteq", left, right];
  }

gt_eq
  = left:term op_gt_eq right:term {
      return ["gteq", left, right];
  }

lt_eq
  = left:term op_lt_eq right:term {
      return ["lteq", left, right];
  }

// ---- Variable Assignment ----
var_assign
  = left:variable assign right:expression {
      return ["Assignment", left,right];
  }

// ---- Functors ----
functor
  = ws functor: (lowercase_word /  operator) ws {
    return {name: functor}
  }

operator
  = ws symbol:[+*-/=] ws {
    return symbol
  } 

// ----- Core ABNF Rules -----

// See RFC 4234, Appendix B (http://tools.ietf.org/html/rfc4234).
DIGIT  = [0-9]
HEXDIG = [0-9a-f]i